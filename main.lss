
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000940  000009d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000940  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800104  00800104  000009d8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000bd  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000029d  00000000  00000000  00000ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000160  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000331  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000179  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ee  00000000  00000000  000013dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  9e:	0c 94 9e 04 	jmp	0x93c	; 0x93c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
volatile uint16_t ms = 0;	//ms counter for RPS measurment
volatile uint16_t msMotStart = 0;	//ms counter for the time used for spinning up the motor
volatile uint8_t msUntilInput = 0;	//ms counter for button debounce

ISR (TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	ISR_counter++;
  b4:	80 91 04 01 	lds	r24, 0x0104
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 04 01 	sts	0x0104, r24
	if(ISR_counter >= 32)
  be:	80 91 04 01 	lds	r24, 0x0104
  c2:	80 32       	cpi	r24, 0x20	; 32
  c4:	d0 f0       	brcs	.+52     	; 0xfa <__vector_16+0x54>
	{
		ms++;
  c6:	80 91 05 01 	lds	r24, 0x0105
  ca:	90 91 06 01 	lds	r25, 0x0106
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 06 01 	sts	0x0106, r25
  d4:	80 93 05 01 	sts	0x0105, r24
		if (msUntilInput)
  d8:	80 91 09 01 	lds	r24, 0x0109
  dc:	88 23       	and	r24, r24
  de:	29 f0       	breq	.+10     	; 0xea <__vector_16+0x44>
		{
			msUntilInput--;
  e0:	80 91 09 01 	lds	r24, 0x0109
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	80 93 09 01 	sts	0x0109, r24
		}
		if (msMotStart)
  ea:	80 91 07 01 	lds	r24, 0x0107
  ee:	90 91 08 01 	lds	r25, 0x0108
  f2:	89 2b       	or	r24, r25
  f4:	49 f4       	brne	.+18     	; 0x108 <__vector_16+0x62>
		{
			msMotStart--;
		}
		ISR_counter = 0;
  f6:	10 92 04 01 	sts	0x0104, r1
	}
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti
		{
			msUntilInput--;
		}
		if (msMotStart)
		{
			msMotStart--;
 108:	80 91 07 01 	lds	r24, 0x0107
 10c:	90 91 08 01 	lds	r25, 0x0108
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	90 93 08 01 	sts	0x0108, r25
 116:	80 93 07 01 	sts	0x0107, r24
 11a:	ed cf       	rjmp	.-38     	; 0xf6 <__vector_16+0x50>

0000011c <__vector_18>:
void uart_send_string(volatile char *s);

/* 9600 baud / Geschwindikeit Uebertragung RS232 Schnittstelle*/
#define UART_BAUD_RATE      9600      
ISR(USART_RX_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	char received_byte;
	received_byte = UDR0;
 12c:	e6 ec       	ldi	r30, 0xC6	; 198
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
	UDR0 = received_byte;//Echo Byte
 132:	80 83       	st	Z, r24

}//end of USART_rx 
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_11>:
	return 0;
}//end of main


ISR (TIMER1_COMPA_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
	
}
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <uart_send_char>:
	uart_send_string(buffer);
}


void uart_send_char(char c)
{
 158:	98 2f       	mov	r25, r24
	while((UCSR0A & (1<<UDRE0)) == 0){};
 15a:	80 91 c0 00 	lds	r24, 0x00C0
 15e:	85 ff       	sbrs	r24, 5
 160:	fc cf       	rjmp	.-8      	; 0x15a <uart_send_char+0x2>
    UDR0 = c;
 162:	90 93 c6 00 	sts	0x00C6, r25
}
 166:	08 95       	ret

00000168 <uart_send_string>:
void uart_send_string(volatile char *s)
{
 168:	fc 01       	movw	r30, r24
	while(*s != 0x00)
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	59 f0       	breq	.+22     	; 0x186 <uart_send_string+0x1e>
	{
		uart_send_char(*s);
 170:	90 81       	ld	r25, Z
}


void uart_send_char(char c)
{
	while((UCSR0A & (1<<UDRE0)) == 0){};
 172:	80 91 c0 00 	lds	r24, 0x00C0
 176:	85 ff       	sbrs	r24, 5
 178:	fc cf       	rjmp	.-8      	; 0x172 <uart_send_string+0xa>
    UDR0 = c;
 17a:	90 93 c6 00 	sts	0x00C6, r25
void uart_send_string(volatile char *s)
{
	while(*s != 0x00)
	{
		uart_send_char(*s);
		s++;
 17e:	31 96       	adiw	r30, 0x01	; 1
	while((UCSR0A & (1<<UDRE0)) == 0){};
    UDR0 = c;
}
void uart_send_string(volatile char *s)
{
	while(*s != 0x00)
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	a9 f7       	brne	.-22     	; 0x170 <uart_send_string+0x8>
 186:	08 95       	ret

00000188 <uart_send_numb>:
{
	
}

void uart_send_numb (uint16_t number)
{
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	df 93       	push	r29
 18e:	cf 93       	push	r28
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	64 97       	sbiw	r28, 0x14	; 20
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	sprintf(buffer, "%d", number);
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <uart_send_numb+0x1a>
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <uart_send_numb+0x1c>
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <uart_send_numb+0x1e>
 1a6:	ed b7       	in	r30, 0x3d	; 61
 1a8:	fe b7       	in	r31, 0x3e	; 62
 1aa:	31 96       	adiw	r30, 0x01	; 1
 1ac:	8e 01       	movw	r16, r28
 1ae:	0f 5f       	subi	r16, 0xFF	; 255
 1b0:	1f 4f       	sbci	r17, 0xFF	; 255
 1b2:	ad b7       	in	r26, 0x3d	; 61
 1b4:	be b7       	in	r27, 0x3e	; 62
 1b6:	12 96       	adiw	r26, 0x02	; 2
 1b8:	1c 93       	st	X, r17
 1ba:	0e 93       	st	-X, r16
 1bc:	11 97       	sbiw	r26, 0x01	; 1
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	31 e0       	ldi	r19, 0x01	; 1
 1c2:	33 83       	std	Z+3, r19	; 0x03
 1c4:	22 83       	std	Z+2, r18	; 0x02
 1c6:	95 83       	std	Z+5, r25	; 0x05
 1c8:	84 83       	std	Z+4, r24	; 0x04
 1ca:	0e 94 c6 01 	call	0x38c	; 0x38c <sprintf>
	uart_send_string(buffer);
 1ce:	8d b7       	in	r24, 0x3d	; 61
 1d0:	9e b7       	in	r25, 0x3e	; 62
 1d2:	06 96       	adiw	r24, 0x06	; 6
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	9e bf       	out	0x3e, r25	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	8d bf       	out	0x3d, r24	; 61
 1de:	c8 01       	movw	r24, r16
 1e0:	0e 94 b4 00 	call	0x168	; 0x168 <uart_send_string>
}
 1e4:	64 96       	adiw	r28, 0x14	; 20
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <main>:
	UDR0 = received_byte;//Echo Byte

}//end of USART_rx 

int main(void)
{
 1fa:	af 92       	push	r10
 1fc:	bf 92       	push	r11
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
	
	DDRD |= (1<<PD1)| (1<<PD0);//set TX0 and RX as output
 20e:	8a b1       	in	r24, 0x0a	; 10
 210:	83 60       	ori	r24, 0x03	; 3
 212:	8a b9       	out	0x0a, r24	; 10
	
    //Timer 1 Configuration
	OCR1A = 1249;	//OCR1A = 0x3D08;==1sec
 214:	81 ee       	ldi	r24, 0xE1	; 225
 216:	94 e0       	ldi	r25, 0x04	; 4
 218:	90 93 89 00 	sts	0x0089, r25
 21c:	80 93 88 00 	sts	0x0088, r24
	
    TCCR1B |= (1 << WGM12);
 220:	80 91 81 00 	lds	r24, 0x0081
 224:	88 60       	ori	r24, 0x08	; 8
 226:	80 93 81 00 	sts	0x0081, r24
    // Mode 4, CTC on OCR1A

    TIMSK1 |= (1 << OCIE1A);
 22a:	80 91 6f 00 	lds	r24, 0x006F
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	80 93 6f 00 	sts	0x006F, r24
    //Set interrupt on compare match

    TCCR1B |= (1 << CS11) | (1 << CS10);
 234:	80 91 81 00 	lds	r24, 0x0081
 238:	83 60       	ori	r24, 0x03	; 3
 23a:	80 93 81 00 	sts	0x0081, r24
    // set prescaler to 64 and start the timer
    
    //UART0
    UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);	//Turn on RX and TX circuits RXCIE0 enables Interrupt when byte received
 23e:	88 e9       	ldi	r24, 0x98	; 152
 240:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	//8-Bit Char size
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H = (BAUD_PRESCALE >> 8);	//load upper 8-Bits of baud rate value into high byte of UBRR0H
 24a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_PRESCALE;			//load lower 8-Bits of Baud rate into low byte of UBRR0L
 24e:	87 e6       	ldi	r24, 0x67	; 103
 250:	80 93 c4 00 	sts	0x00C4, r24
	
	//Konfiguration Timer Overflow
	//==================================================================
	TCCR0A	= 0x00;
 254:	14 bc       	out	0x24, r1	; 36
	TCCR0B	= 0x01;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	85 bd       	out	0x25, r24	; 37
	TIMSK0	|= (1 << TOIE0);
 25a:	80 91 6e 00 	lds	r24, 0x006E
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 93 6e 00 	sts	0x006E, r24
	TIFR0 |= (1 << TOV0);
 264:	a8 9a       	sbi	0x15, 0	; 21
	//==================================================================
	
    sei();
 266:	78 94       	sei
    // enable interrupts
    
    DDRD &= ~(1<<PD2);	//Set PD2 as Input
 268:	52 98       	cbi	0x0a, 2	; 10
    
    DDRC &= ~(1<<PC0) | ~(1<<PC1);	//Set PC0 and PC1 as Inputs
 26a:	87 b1       	in	r24, 0x07	; 7
 26c:	87 b9       	out	0x07, r24	; 7
    
    DDRC |= (1<<PC3);	//Set PC3 as Output
 26e:	3b 9a       	sbi	0x07, 3	; 7
    uint8_t LastRPS = 0;	//Variable used to store the RPS in the last transsmission to PC
    uint16_t RPM = 0;	//Variable used to store the calculated RPM
    
	while(1)
	{ 
		Input = PINC;	//Get user input
 270:	e6 b1       	in	r30, 0x06	; 6
		FullRotation = (PIND & (1<<PD2));	//get status of Rotation sensor
 272:	09 b1       	in	r16, 0x09	; 9
 274:	04 70       	andi	r16, 0x04	; 4
 276:	dd 24       	eor	r13, r13
 278:	ff 24       	eor	r15, r15
 27a:	cc 24       	eor	r12, r12
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	ee 24       	eor	r14, r14
 280:	a0 e0       	ldi	r26, 0x00	; 0
 282:	11 e0       	ldi	r17, 0x01	; 1
		if((!LastRPS && PWMedge) || msMotStart)	//Check if motor is turning when it should be turning or if it is currently spinning up
		{
			PWM_ON;	//Turn PWM on
			if(!msMotStart)	//check if the spin up process is already started
			{
				msMotStart = 500;	//if no spin up process has been started yet set the spin up time to 500
 284:	c4 ef       	ldi	r28, 0xF4	; 244
 286:	d1 e0       	ldi	r29, 0x01	; 1
					else
					{
						PWMedge += 10;	//Increase PWMedge by 10
					}
				}
				msUntilInput = 10;	//Set time until next input will be processed
 288:	2a e0       	ldi	r18, 0x0A	; 10
 28a:	b2 2e       	mov	r11, r18
		}
		
		if(ms >= 1000)	//Check if a second has passed since last transsmission to PC
		{
			RPM = RPScounter * 60;	//Calculate RPM from RPS
			uart_send_numb(RPM);	//Send RPM data
 28c:	9c e3       	ldi	r25, 0x3C	; 60
 28e:	a9 2e       	mov	r10, r25
		if ((cycleCounter % 8) == 0)	//Check if it has been 8 cycles since last PWMcounter increase to reduce PWM frequency
		{
			PWMcounter++;
		}
		
		if((!LastRPS && PWMedge) || msMotStart)	//Check if motor is turning when it should be turning or if it is currently spinning up
 290:	aa 23       	and	r26, r26
 292:	e1 f5       	brne	.+120    	; 0x30c <main+0x112>
 294:	ff 20       	and	r15, r15
 296:	d1 f1       	breq	.+116    	; 0x30c <main+0x112>
		{
			PWM_ON;	//Turn PWM on
 298:	43 9a       	sbi	0x08, 3	; 8
			if(!msMotStart)	//check if the spin up process is already started
 29a:	80 91 07 01 	lds	r24, 0x0107
 29e:	90 91 08 01 	lds	r25, 0x0108
 2a2:	89 2b       	or	r24, r25
 2a4:	21 f4       	brne	.+8      	; 0x2ae <main+0xb4>
			{
				msMotStart = 500;	//if no spin up process has been started yet set the spin up time to 500
 2a6:	d0 93 08 01 	sts	0x0108, r29
 2aa:	c0 93 07 01 	sts	0x0107, r28
				msUntilInput = 10;	//Set time until next input will be processed
			}
			LastInput = Input;	//Store current Input
		}
		
		if(!FullRotation && FullRotationLast)	//Check for a falling edge by the Rotation sensor
 2ae:	00 23       	and	r16, r16
 2b0:	11 f4       	brne	.+4      	; 0x2b6 <main+0xbc>
 2b2:	f1 11       	cpse	r31, r1
		{
			RPScounter++;	//Increase RPS couner
 2b4:	e3 94       	inc	r14
		}
		
		FullRotationLast = FullRotation;	//Store current status of Rotation sensor
		
		if(PWMcounter <= PWMedge)	//Check if PWM should be low or high
 2b6:	fd 14       	cp	r15, r13
 2b8:	08 f4       	brcc	.+2      	; 0x2bc <main+0xc2>
 2ba:	4b c0       	rjmp	.+150    	; 0x352 <main+0x158>
		{
			PWM_ON;	//set PWM to high
 2bc:	43 9a       	sbi	0x08, 3	; 8
		else
		{
			PWM_OFF;	//set PWM to high
		}
		
		if(ms >= 1000)	//Check if a second has passed since last transsmission to PC
 2be:	80 91 05 01 	lds	r24, 0x0105
 2c2:	90 91 06 01 	lds	r25, 0x0106
 2c6:	88 5e       	subi	r24, 0xE8	; 232
 2c8:	93 40       	sbci	r25, 0x03	; 3
 2ca:	88 f0       	brcs	.+34     	; 0x2ee <main+0xf4>
		{
			RPM = RPScounter * 60;	//Calculate RPM from RPS
			uart_send_numb(RPM);	//Send RPM data
 2cc:	ea 9c       	mul	r14, r10
 2ce:	c0 01       	movw	r24, r0
 2d0:	11 24       	eor	r1, r1
 2d2:	0e 94 c4 00 	call	0x188	; 0x188 <uart_send_numb>
}


void uart_send_char(char c)
{
	while((UCSR0A & (1<<UDRE0)) == 0){};
 2d6:	80 91 c0 00 	lds	r24, 0x00C0
 2da:	85 ff       	sbrs	r24, 5
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <main+0xdc>
    UDR0 = c;
 2de:	b0 92 c6 00 	sts	0x00C6, r11
			RPM = RPScounter * 60;	//Calculate RPM from RPS
			uart_send_numb(RPM);	//Send RPM data
			uart_send_char('\n');	//Send newline
			LastRPS = RPScounter;	//Store the current RPS value
			RPScounter = 0;	//Set RPScounter to 0
			ms = 0;	//Set ms counter to 0
 2e2:	10 92 06 01 	sts	0x0106, r1
 2e6:	10 92 05 01 	sts	0x0105, r1
 2ea:	ae 2d       	mov	r26, r14
 2ec:	ee 24       	eor	r14, r14
    uint8_t LastRPS = 0;	//Variable used to store the RPS in the last transsmission to PC
    uint16_t RPM = 0;	//Variable used to store the calculated RPM
    
	while(1)
	{ 
		Input = PINC;	//Get user input
 2ee:	e6 b1       	in	r30, 0x06	; 6
		FullRotation = (PIND & (1<<PD2));	//get status of Rotation sensor
 2f0:	29 b1       	in	r18, 0x09	; 9
		cycleCounter++;	//Increase Cycle counter by 1
 2f2:	1f 5f       	subi	r17, 0xFF	; 255
		
		if ((cycleCounter % 8) == 0)	//Check if it has been 8 cycles since last PWMcounter increase to reduce PWM frequency
 2f4:	81 2f       	mov	r24, r17
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	87 70       	andi	r24, 0x07	; 7
 2fa:	90 70       	andi	r25, 0x00	; 0
 2fc:	89 2b       	or	r24, r25
 2fe:	09 f4       	brne	.+2      	; 0x302 <main+0x108>
		{
			PWMcounter++;
 300:	d3 94       	inc	r13
    uint16_t RPM = 0;	//Variable used to store the calculated RPM
    
	while(1)
	{ 
		Input = PINC;	//Get user input
		FullRotation = (PIND & (1<<PD2));	//get status of Rotation sensor
 302:	f0 2f       	mov	r31, r16
 304:	02 2f       	mov	r16, r18
 306:	04 70       	andi	r16, 0x04	; 4
		if ((cycleCounter % 8) == 0)	//Check if it has been 8 cycles since last PWMcounter increase to reduce PWM frequency
		{
			PWMcounter++;
		}
		
		if((!LastRPS && PWMedge) || msMotStart)	//Check if motor is turning when it should be turning or if it is currently spinning up
 308:	aa 23       	and	r26, r26
 30a:	21 f2       	breq	.-120    	; 0x294 <main+0x9a>
 30c:	80 91 07 01 	lds	r24, 0x0107
 310:	90 91 08 01 	lds	r25, 0x0108
 314:	89 2b       	or	r24, r25
 316:	09 f0       	breq	.+2      	; 0x31a <main+0x120>
 318:	bf cf       	rjmp	.-130    	; 0x298 <main+0x9e>
			{
				msMotStart = 500;	//if no spin up process has been started yet set the spin up time to 500
			}
		}
		
		else if(!msUntilInput)	//Check if enough time has passed since last input for debouncing
 31a:	80 91 09 01 	lds	r24, 0x0109
 31e:	88 23       	and	r24, r24
 320:	31 f6       	brne	.-116    	; 0x2ae <main+0xb4>
		{
			if((Input & SpeedMinusMask) & ~(LastInput & SpeedMinusMask))	//Check for a rising edge on the Speed- Pin
 322:	6e 2f       	mov	r22, r30
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	4c 2d       	mov	r20, r12
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	9b 01       	movw	r18, r22
 32c:	21 70       	andi	r18, 0x01	; 1
 32e:	30 70       	andi	r19, 0x00	; 0
 330:	ca 01       	movw	r24, r20
 332:	81 70       	andi	r24, 0x01	; 1
 334:	90 70       	andi	r25, 0x00	; 0
 336:	80 95       	com	r24
 338:	90 95       	com	r25
 33a:	28 23       	and	r18, r24
 33c:	39 23       	and	r19, r25
 33e:	23 2b       	or	r18, r19
 340:	51 f0       	breq	.+20     	; 0x356 <main+0x15c>
			{
				if(PWMedge > PWM_MIN)	//Check if PWMedge is greater than the minimum
 342:	27 e4       	ldi	r18, 0x47	; 71
 344:	2f 15       	cp	r18, r15
 346:	e0 f0       	brcs	.+56     	; 0x380 <main+0x186>
 348:	ff 24       	eor	r15, r15
					else
					{
						PWMedge += 10;	//Increase PWMedge by 10
					}
				}
				msUntilInput = 10;	//Set time until next input will be processed
 34a:	b0 92 09 01 	sts	0x0109, r11
 34e:	ce 2e       	mov	r12, r30
 350:	ae cf       	rjmp	.-164    	; 0x2ae <main+0xb4>
		{
			PWM_ON;	//set PWM to high
		}
		else
		{
			PWM_OFF;	//set PWM to high
 352:	43 98       	cbi	0x08, 3	; 8
 354:	b4 cf       	rjmp	.-152    	; 0x2be <main+0xc4>
				{
					PWMedge = 0;	//if PWMedge is below minimum set PWMedge to 0
				}
				msUntilInput = 10;	//Set time until next input will be processed
			}
			else if((Input & SpeedPlusMask) & ~(LastInput & SpeedPlusMask))	//Check for a rising edge on the Speed+ Pin
 356:	62 70       	andi	r22, 0x02	; 2
 358:	70 70       	andi	r23, 0x00	; 0
 35a:	42 70       	andi	r20, 0x02	; 2
 35c:	50 70       	andi	r21, 0x00	; 0
 35e:	40 95       	com	r20
 360:	50 95       	com	r21
 362:	64 23       	and	r22, r20
 364:	75 23       	and	r23, r21
 366:	67 2b       	or	r22, r23
 368:	91 f3       	breq	.-28     	; 0x34e <main+0x154>
			{
				if((PWMedge + 10) < 256)	//Check if PWMedge has enough space to increase by 10
 36a:	8f 2d       	mov	r24, r15
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	86 3f       	cpi	r24, 0xF6	; 246
 370:	91 05       	cpc	r25, r1
 372:	5c f7       	brge	.-42     	; 0x34a <main+0x150>
				{
					if(PWMedge < PWM_MIN)	//Check if PWMedge is bellow the minimum
 374:	26 e4       	ldi	r18, 0x46	; 70
 376:	2f 15       	cp	r18, r15
 378:	30 f0       	brcs	.+12     	; 0x386 <main+0x18c>
 37a:	87 e4       	ldi	r24, 0x47	; 71
 37c:	f8 2e       	mov	r15, r24
 37e:	e5 cf       	rjmp	.-54     	; 0x34a <main+0x150>
		{
			if((Input & SpeedMinusMask) & ~(LastInput & SpeedMinusMask))	//Check for a rising edge on the Speed- Pin
			{
				if(PWMedge > PWM_MIN)	//Check if PWMedge is greater than the minimum
				{
					PWMedge -= 10;	//Reduce PWMedge by 10
 380:	86 ef       	ldi	r24, 0xF6	; 246
 382:	f8 0e       	add	r15, r24
 384:	e2 cf       	rjmp	.-60     	; 0x34a <main+0x150>
					{
						PWMedge = PWM_MIN;	//Set PWM to minimum if PWMedge is inreased from below the minimum
					}
					else
					{
						PWMedge += 10;	//Increase PWMedge by 10
 386:	8a e0       	ldi	r24, 0x0A	; 10
 388:	f8 0e       	add	r15, r24
 38a:	df cf       	rjmp	.-66     	; 0x34a <main+0x150>

0000038c <sprintf>:
 38c:	ae e0       	ldi	r26, 0x0E	; 14
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	ec ec       	ldi	r30, 0xCC	; 204
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__prologue_saves__+0x1c>
 398:	0d 89       	ldd	r16, Y+21	; 0x15
 39a:	1e 89       	ldd	r17, Y+22	; 0x16
 39c:	86 e0       	ldi	r24, 0x06	; 6
 39e:	8c 83       	std	Y+4, r24	; 0x04
 3a0:	1a 83       	std	Y+2, r17	; 0x02
 3a2:	09 83       	std	Y+1, r16	; 0x01
 3a4:	8f ef       	ldi	r24, 0xFF	; 255
 3a6:	9f e7       	ldi	r25, 0x7F	; 127
 3a8:	9e 83       	std	Y+6, r25	; 0x06
 3aa:	8d 83       	std	Y+5, r24	; 0x05
 3ac:	9e 01       	movw	r18, r28
 3ae:	27 5e       	subi	r18, 0xE7	; 231
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	6f 89       	ldd	r22, Y+23	; 0x17
 3b8:	78 8d       	ldd	r23, Y+24	; 0x18
 3ba:	a9 01       	movw	r20, r18
 3bc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <vfprintf>
 3c0:	2f 81       	ldd	r18, Y+7	; 0x07
 3c2:	38 85       	ldd	r19, Y+8	; 0x08
 3c4:	02 0f       	add	r16, r18
 3c6:	13 1f       	adc	r17, r19
 3c8:	f8 01       	movw	r30, r16
 3ca:	10 82       	st	Z, r1
 3cc:	2e 96       	adiw	r28, 0x0e	; 14
 3ce:	e4 e0       	ldi	r30, 0x04	; 4
 3d0:	0c 94 91 04 	jmp	0x922	; 0x922 <__epilogue_restores__+0x1c>

000003d4 <vfprintf>:
 3d4:	ab e0       	ldi	r26, 0x0B	; 11
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	e0 ef       	ldi	r30, 0xF0	; 240
 3da:	f1 e0       	ldi	r31, 0x01	; 1
 3dc:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__prologue_saves__>
 3e0:	3c 01       	movw	r6, r24
 3e2:	2b 01       	movw	r4, r22
 3e4:	5a 01       	movw	r10, r20
 3e6:	fc 01       	movw	r30, r24
 3e8:	17 82       	std	Z+7, r1	; 0x07
 3ea:	16 82       	std	Z+6, r1	; 0x06
 3ec:	83 81       	ldd	r24, Z+3	; 0x03
 3ee:	81 fd       	sbrc	r24, 1
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <vfprintf+0x24>
 3f2:	6f ef       	ldi	r22, 0xFF	; 255
 3f4:	7f ef       	ldi	r23, 0xFF	; 255
 3f6:	c6 c1       	rjmp	.+908    	; 0x784 <vfprintf+0x3b0>
 3f8:	9a e0       	ldi	r25, 0x0A	; 10
 3fa:	89 2e       	mov	r8, r25
 3fc:	1e 01       	movw	r2, r28
 3fe:	08 94       	sec
 400:	21 1c       	adc	r2, r1
 402:	31 1c       	adc	r3, r1
 404:	f3 01       	movw	r30, r6
 406:	23 81       	ldd	r18, Z+3	; 0x03
 408:	f2 01       	movw	r30, r4
 40a:	23 fd       	sbrc	r18, 3
 40c:	85 91       	lpm	r24, Z+
 40e:	23 ff       	sbrs	r18, 3
 410:	81 91       	ld	r24, Z+
 412:	2f 01       	movw	r4, r30
 414:	88 23       	and	r24, r24
 416:	09 f4       	brne	.+2      	; 0x41a <vfprintf+0x46>
 418:	b2 c1       	rjmp	.+868    	; 0x77e <vfprintf+0x3aa>
 41a:	85 32       	cpi	r24, 0x25	; 37
 41c:	39 f4       	brne	.+14     	; 0x42c <vfprintf+0x58>
 41e:	23 fd       	sbrc	r18, 3
 420:	85 91       	lpm	r24, Z+
 422:	23 ff       	sbrs	r18, 3
 424:	81 91       	ld	r24, Z+
 426:	2f 01       	movw	r4, r30
 428:	85 32       	cpi	r24, 0x25	; 37
 42a:	29 f4       	brne	.+10     	; 0x436 <vfprintf+0x62>
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	b3 01       	movw	r22, r6
 430:	0e 94 dd 03 	call	0x7ba	; 0x7ba <fputc>
 434:	e7 cf       	rjmp	.-50     	; 0x404 <vfprintf+0x30>
 436:	98 2f       	mov	r25, r24
 438:	ff 24       	eor	r15, r15
 43a:	ee 24       	eor	r14, r14
 43c:	99 24       	eor	r9, r9
 43e:	ff e1       	ldi	r31, 0x1F	; 31
 440:	ff 15       	cp	r31, r15
 442:	d0 f0       	brcs	.+52     	; 0x478 <vfprintf+0xa4>
 444:	9b 32       	cpi	r25, 0x2B	; 43
 446:	69 f0       	breq	.+26     	; 0x462 <vfprintf+0x8e>
 448:	9c 32       	cpi	r25, 0x2C	; 44
 44a:	28 f4       	brcc	.+10     	; 0x456 <vfprintf+0x82>
 44c:	90 32       	cpi	r25, 0x20	; 32
 44e:	59 f0       	breq	.+22     	; 0x466 <vfprintf+0x92>
 450:	93 32       	cpi	r25, 0x23	; 35
 452:	91 f4       	brne	.+36     	; 0x478 <vfprintf+0xa4>
 454:	0e c0       	rjmp	.+28     	; 0x472 <vfprintf+0x9e>
 456:	9d 32       	cpi	r25, 0x2D	; 45
 458:	49 f0       	breq	.+18     	; 0x46c <vfprintf+0x98>
 45a:	90 33       	cpi	r25, 0x30	; 48
 45c:	69 f4       	brne	.+26     	; 0x478 <vfprintf+0xa4>
 45e:	41 e0       	ldi	r20, 0x01	; 1
 460:	24 c0       	rjmp	.+72     	; 0x4aa <vfprintf+0xd6>
 462:	52 e0       	ldi	r21, 0x02	; 2
 464:	f5 2a       	or	r15, r21
 466:	84 e0       	ldi	r24, 0x04	; 4
 468:	f8 2a       	or	r15, r24
 46a:	28 c0       	rjmp	.+80     	; 0x4bc <vfprintf+0xe8>
 46c:	98 e0       	ldi	r25, 0x08	; 8
 46e:	f9 2a       	or	r15, r25
 470:	25 c0       	rjmp	.+74     	; 0x4bc <vfprintf+0xe8>
 472:	e0 e1       	ldi	r30, 0x10	; 16
 474:	fe 2a       	or	r15, r30
 476:	22 c0       	rjmp	.+68     	; 0x4bc <vfprintf+0xe8>
 478:	f7 fc       	sbrc	r15, 7
 47a:	29 c0       	rjmp	.+82     	; 0x4ce <vfprintf+0xfa>
 47c:	89 2f       	mov	r24, r25
 47e:	80 53       	subi	r24, 0x30	; 48
 480:	8a 30       	cpi	r24, 0x0A	; 10
 482:	70 f4       	brcc	.+28     	; 0x4a0 <vfprintf+0xcc>
 484:	f6 fe       	sbrs	r15, 6
 486:	05 c0       	rjmp	.+10     	; 0x492 <vfprintf+0xbe>
 488:	98 9c       	mul	r9, r8
 48a:	90 2c       	mov	r9, r0
 48c:	11 24       	eor	r1, r1
 48e:	98 0e       	add	r9, r24
 490:	15 c0       	rjmp	.+42     	; 0x4bc <vfprintf+0xe8>
 492:	e8 9c       	mul	r14, r8
 494:	e0 2c       	mov	r14, r0
 496:	11 24       	eor	r1, r1
 498:	e8 0e       	add	r14, r24
 49a:	f0 e2       	ldi	r31, 0x20	; 32
 49c:	ff 2a       	or	r15, r31
 49e:	0e c0       	rjmp	.+28     	; 0x4bc <vfprintf+0xe8>
 4a0:	9e 32       	cpi	r25, 0x2E	; 46
 4a2:	29 f4       	brne	.+10     	; 0x4ae <vfprintf+0xda>
 4a4:	f6 fc       	sbrc	r15, 6
 4a6:	6b c1       	rjmp	.+726    	; 0x77e <vfprintf+0x3aa>
 4a8:	40 e4       	ldi	r20, 0x40	; 64
 4aa:	f4 2a       	or	r15, r20
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <vfprintf+0xe8>
 4ae:	9c 36       	cpi	r25, 0x6C	; 108
 4b0:	19 f4       	brne	.+6      	; 0x4b8 <vfprintf+0xe4>
 4b2:	50 e8       	ldi	r21, 0x80	; 128
 4b4:	f5 2a       	or	r15, r21
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <vfprintf+0xe8>
 4b8:	98 36       	cpi	r25, 0x68	; 104
 4ba:	49 f4       	brne	.+18     	; 0x4ce <vfprintf+0xfa>
 4bc:	f2 01       	movw	r30, r4
 4be:	23 fd       	sbrc	r18, 3
 4c0:	95 91       	lpm	r25, Z+
 4c2:	23 ff       	sbrs	r18, 3
 4c4:	91 91       	ld	r25, Z+
 4c6:	2f 01       	movw	r4, r30
 4c8:	99 23       	and	r25, r25
 4ca:	09 f0       	breq	.+2      	; 0x4ce <vfprintf+0xfa>
 4cc:	b8 cf       	rjmp	.-144    	; 0x43e <vfprintf+0x6a>
 4ce:	89 2f       	mov	r24, r25
 4d0:	85 54       	subi	r24, 0x45	; 69
 4d2:	83 30       	cpi	r24, 0x03	; 3
 4d4:	18 f0       	brcs	.+6      	; 0x4dc <vfprintf+0x108>
 4d6:	80 52       	subi	r24, 0x20	; 32
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	38 f4       	brcc	.+14     	; 0x4ea <vfprintf+0x116>
 4dc:	44 e0       	ldi	r20, 0x04	; 4
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	a4 0e       	add	r10, r20
 4e2:	b5 1e       	adc	r11, r21
 4e4:	5f e3       	ldi	r21, 0x3F	; 63
 4e6:	59 83       	std	Y+1, r21	; 0x01
 4e8:	0f c0       	rjmp	.+30     	; 0x508 <vfprintf+0x134>
 4ea:	93 36       	cpi	r25, 0x63	; 99
 4ec:	31 f0       	breq	.+12     	; 0x4fa <vfprintf+0x126>
 4ee:	93 37       	cpi	r25, 0x73	; 115
 4f0:	79 f0       	breq	.+30     	; 0x510 <vfprintf+0x13c>
 4f2:	93 35       	cpi	r25, 0x53	; 83
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <vfprintf+0x124>
 4f6:	56 c0       	rjmp	.+172    	; 0x5a4 <vfprintf+0x1d0>
 4f8:	20 c0       	rjmp	.+64     	; 0x53a <vfprintf+0x166>
 4fa:	f5 01       	movw	r30, r10
 4fc:	80 81       	ld	r24, Z
 4fe:	89 83       	std	Y+1, r24	; 0x01
 500:	42 e0       	ldi	r20, 0x02	; 2
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	a4 0e       	add	r10, r20
 506:	b5 1e       	adc	r11, r21
 508:	61 01       	movw	r12, r2
 50a:	01 e0       	ldi	r16, 0x01	; 1
 50c:	10 e0       	ldi	r17, 0x00	; 0
 50e:	12 c0       	rjmp	.+36     	; 0x534 <vfprintf+0x160>
 510:	f5 01       	movw	r30, r10
 512:	c0 80       	ld	r12, Z
 514:	d1 80       	ldd	r13, Z+1	; 0x01
 516:	f6 fc       	sbrc	r15, 6
 518:	03 c0       	rjmp	.+6      	; 0x520 <vfprintf+0x14c>
 51a:	6f ef       	ldi	r22, 0xFF	; 255
 51c:	7f ef       	ldi	r23, 0xFF	; 255
 51e:	02 c0       	rjmp	.+4      	; 0x524 <vfprintf+0x150>
 520:	69 2d       	mov	r22, r9
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	42 e0       	ldi	r20, 0x02	; 2
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	a4 0e       	add	r10, r20
 52a:	b5 1e       	adc	r11, r21
 52c:	c6 01       	movw	r24, r12
 52e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <strnlen>
 532:	8c 01       	movw	r16, r24
 534:	5f e7       	ldi	r21, 0x7F	; 127
 536:	f5 22       	and	r15, r21
 538:	14 c0       	rjmp	.+40     	; 0x562 <vfprintf+0x18e>
 53a:	f5 01       	movw	r30, r10
 53c:	c0 80       	ld	r12, Z
 53e:	d1 80       	ldd	r13, Z+1	; 0x01
 540:	f6 fc       	sbrc	r15, 6
 542:	03 c0       	rjmp	.+6      	; 0x54a <vfprintf+0x176>
 544:	6f ef       	ldi	r22, 0xFF	; 255
 546:	7f ef       	ldi	r23, 0xFF	; 255
 548:	02 c0       	rjmp	.+4      	; 0x54e <vfprintf+0x17a>
 54a:	69 2d       	mov	r22, r9
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	42 e0       	ldi	r20, 0x02	; 2
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	a4 0e       	add	r10, r20
 554:	b5 1e       	adc	r11, r21
 556:	c6 01       	movw	r24, r12
 558:	0e 94 c7 03 	call	0x78e	; 0x78e <strnlen_P>
 55c:	8c 01       	movw	r16, r24
 55e:	50 e8       	ldi	r21, 0x80	; 128
 560:	f5 2a       	or	r15, r21
 562:	f3 fe       	sbrs	r15, 3
 564:	07 c0       	rjmp	.+14     	; 0x574 <vfprintf+0x1a0>
 566:	1a c0       	rjmp	.+52     	; 0x59c <vfprintf+0x1c8>
 568:	80 e2       	ldi	r24, 0x20	; 32
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	b3 01       	movw	r22, r6
 56e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <fputc>
 572:	ea 94       	dec	r14
 574:	8e 2d       	mov	r24, r14
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	08 17       	cp	r16, r24
 57a:	19 07       	cpc	r17, r25
 57c:	a8 f3       	brcs	.-22     	; 0x568 <vfprintf+0x194>
 57e:	0e c0       	rjmp	.+28     	; 0x59c <vfprintf+0x1c8>
 580:	f6 01       	movw	r30, r12
 582:	f7 fc       	sbrc	r15, 7
 584:	85 91       	lpm	r24, Z+
 586:	f7 fe       	sbrs	r15, 7
 588:	81 91       	ld	r24, Z+
 58a:	6f 01       	movw	r12, r30
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	b3 01       	movw	r22, r6
 590:	0e 94 dd 03 	call	0x7ba	; 0x7ba <fputc>
 594:	e1 10       	cpse	r14, r1
 596:	ea 94       	dec	r14
 598:	01 50       	subi	r16, 0x01	; 1
 59a:	10 40       	sbci	r17, 0x00	; 0
 59c:	01 15       	cp	r16, r1
 59e:	11 05       	cpc	r17, r1
 5a0:	79 f7       	brne	.-34     	; 0x580 <vfprintf+0x1ac>
 5a2:	ea c0       	rjmp	.+468    	; 0x778 <vfprintf+0x3a4>
 5a4:	94 36       	cpi	r25, 0x64	; 100
 5a6:	11 f0       	breq	.+4      	; 0x5ac <vfprintf+0x1d8>
 5a8:	99 36       	cpi	r25, 0x69	; 105
 5aa:	69 f5       	brne	.+90     	; 0x606 <vfprintf+0x232>
 5ac:	f7 fe       	sbrs	r15, 7
 5ae:	08 c0       	rjmp	.+16     	; 0x5c0 <vfprintf+0x1ec>
 5b0:	f5 01       	movw	r30, r10
 5b2:	20 81       	ld	r18, Z
 5b4:	31 81       	ldd	r19, Z+1	; 0x01
 5b6:	42 81       	ldd	r20, Z+2	; 0x02
 5b8:	53 81       	ldd	r21, Z+3	; 0x03
 5ba:	84 e0       	ldi	r24, 0x04	; 4
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0a c0       	rjmp	.+20     	; 0x5d4 <vfprintf+0x200>
 5c0:	f5 01       	movw	r30, r10
 5c2:	80 81       	ld	r24, Z
 5c4:	91 81       	ldd	r25, Z+1	; 0x01
 5c6:	9c 01       	movw	r18, r24
 5c8:	44 27       	eor	r20, r20
 5ca:	37 fd       	sbrc	r19, 7
 5cc:	40 95       	com	r20
 5ce:	54 2f       	mov	r21, r20
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	a8 0e       	add	r10, r24
 5d6:	b9 1e       	adc	r11, r25
 5d8:	9f e6       	ldi	r25, 0x6F	; 111
 5da:	f9 22       	and	r15, r25
 5dc:	57 ff       	sbrs	r21, 7
 5de:	09 c0       	rjmp	.+18     	; 0x5f2 <vfprintf+0x21e>
 5e0:	50 95       	com	r21
 5e2:	40 95       	com	r20
 5e4:	30 95       	com	r19
 5e6:	21 95       	neg	r18
 5e8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ea:	4f 4f       	sbci	r20, 0xFF	; 255
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
 5ee:	e0 e8       	ldi	r30, 0x80	; 128
 5f0:	fe 2a       	or	r15, r30
 5f2:	ca 01       	movw	r24, r20
 5f4:	b9 01       	movw	r22, r18
 5f6:	a1 01       	movw	r20, r2
 5f8:	2a e0       	ldi	r18, 0x0A	; 10
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	0e 94 09 04 	call	0x812	; 0x812 <__ultoa_invert>
 600:	d8 2e       	mov	r13, r24
 602:	d2 18       	sub	r13, r2
 604:	40 c0       	rjmp	.+128    	; 0x686 <vfprintf+0x2b2>
 606:	95 37       	cpi	r25, 0x75	; 117
 608:	29 f4       	brne	.+10     	; 0x614 <vfprintf+0x240>
 60a:	1f 2d       	mov	r17, r15
 60c:	1f 7e       	andi	r17, 0xEF	; 239
 60e:	2a e0       	ldi	r18, 0x0A	; 10
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	1d c0       	rjmp	.+58     	; 0x64e <vfprintf+0x27a>
 614:	1f 2d       	mov	r17, r15
 616:	19 7f       	andi	r17, 0xF9	; 249
 618:	9f 36       	cpi	r25, 0x6F	; 111
 61a:	61 f0       	breq	.+24     	; 0x634 <vfprintf+0x260>
 61c:	90 37       	cpi	r25, 0x70	; 112
 61e:	20 f4       	brcc	.+8      	; 0x628 <vfprintf+0x254>
 620:	98 35       	cpi	r25, 0x58	; 88
 622:	09 f0       	breq	.+2      	; 0x626 <vfprintf+0x252>
 624:	ac c0       	rjmp	.+344    	; 0x77e <vfprintf+0x3aa>
 626:	0f c0       	rjmp	.+30     	; 0x646 <vfprintf+0x272>
 628:	90 37       	cpi	r25, 0x70	; 112
 62a:	39 f0       	breq	.+14     	; 0x63a <vfprintf+0x266>
 62c:	98 37       	cpi	r25, 0x78	; 120
 62e:	09 f0       	breq	.+2      	; 0x632 <vfprintf+0x25e>
 630:	a6 c0       	rjmp	.+332    	; 0x77e <vfprintf+0x3aa>
 632:	04 c0       	rjmp	.+8      	; 0x63c <vfprintf+0x268>
 634:	28 e0       	ldi	r18, 0x08	; 8
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	0a c0       	rjmp	.+20     	; 0x64e <vfprintf+0x27a>
 63a:	10 61       	ori	r17, 0x10	; 16
 63c:	14 fd       	sbrc	r17, 4
 63e:	14 60       	ori	r17, 0x04	; 4
 640:	20 e1       	ldi	r18, 0x10	; 16
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	04 c0       	rjmp	.+8      	; 0x64e <vfprintf+0x27a>
 646:	14 fd       	sbrc	r17, 4
 648:	16 60       	ori	r17, 0x06	; 6
 64a:	20 e1       	ldi	r18, 0x10	; 16
 64c:	32 e0       	ldi	r19, 0x02	; 2
 64e:	17 ff       	sbrs	r17, 7
 650:	08 c0       	rjmp	.+16     	; 0x662 <vfprintf+0x28e>
 652:	f5 01       	movw	r30, r10
 654:	60 81       	ld	r22, Z
 656:	71 81       	ldd	r23, Z+1	; 0x01
 658:	82 81       	ldd	r24, Z+2	; 0x02
 65a:	93 81       	ldd	r25, Z+3	; 0x03
 65c:	44 e0       	ldi	r20, 0x04	; 4
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	08 c0       	rjmp	.+16     	; 0x672 <vfprintf+0x29e>
 662:	f5 01       	movw	r30, r10
 664:	80 81       	ld	r24, Z
 666:	91 81       	ldd	r25, Z+1	; 0x01
 668:	bc 01       	movw	r22, r24
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	42 e0       	ldi	r20, 0x02	; 2
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	a4 0e       	add	r10, r20
 674:	b5 1e       	adc	r11, r21
 676:	a1 01       	movw	r20, r2
 678:	0e 94 09 04 	call	0x812	; 0x812 <__ultoa_invert>
 67c:	d8 2e       	mov	r13, r24
 67e:	d2 18       	sub	r13, r2
 680:	8f e7       	ldi	r24, 0x7F	; 127
 682:	f8 2e       	mov	r15, r24
 684:	f1 22       	and	r15, r17
 686:	f6 fe       	sbrs	r15, 6
 688:	0b c0       	rjmp	.+22     	; 0x6a0 <vfprintf+0x2cc>
 68a:	5e ef       	ldi	r21, 0xFE	; 254
 68c:	f5 22       	and	r15, r21
 68e:	d9 14       	cp	r13, r9
 690:	38 f4       	brcc	.+14     	; 0x6a0 <vfprintf+0x2cc>
 692:	f4 fe       	sbrs	r15, 4
 694:	07 c0       	rjmp	.+14     	; 0x6a4 <vfprintf+0x2d0>
 696:	f2 fc       	sbrc	r15, 2
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <vfprintf+0x2d0>
 69a:	8f ee       	ldi	r24, 0xEF	; 239
 69c:	f8 22       	and	r15, r24
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <vfprintf+0x2d0>
 6a0:	1d 2d       	mov	r17, r13
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <vfprintf+0x2d2>
 6a4:	19 2d       	mov	r17, r9
 6a6:	f4 fe       	sbrs	r15, 4
 6a8:	0d c0       	rjmp	.+26     	; 0x6c4 <vfprintf+0x2f0>
 6aa:	fe 01       	movw	r30, r28
 6ac:	ed 0d       	add	r30, r13
 6ae:	f1 1d       	adc	r31, r1
 6b0:	80 81       	ld	r24, Z
 6b2:	80 33       	cpi	r24, 0x30	; 48
 6b4:	19 f4       	brne	.+6      	; 0x6bc <vfprintf+0x2e8>
 6b6:	99 ee       	ldi	r25, 0xE9	; 233
 6b8:	f9 22       	and	r15, r25
 6ba:	08 c0       	rjmp	.+16     	; 0x6cc <vfprintf+0x2f8>
 6bc:	1f 5f       	subi	r17, 0xFF	; 255
 6be:	f2 fe       	sbrs	r15, 2
 6c0:	05 c0       	rjmp	.+10     	; 0x6cc <vfprintf+0x2f8>
 6c2:	03 c0       	rjmp	.+6      	; 0x6ca <vfprintf+0x2f6>
 6c4:	8f 2d       	mov	r24, r15
 6c6:	86 78       	andi	r24, 0x86	; 134
 6c8:	09 f0       	breq	.+2      	; 0x6cc <vfprintf+0x2f8>
 6ca:	1f 5f       	subi	r17, 0xFF	; 255
 6cc:	0f 2d       	mov	r16, r15
 6ce:	f3 fc       	sbrc	r15, 3
 6d0:	14 c0       	rjmp	.+40     	; 0x6fa <vfprintf+0x326>
 6d2:	f0 fe       	sbrs	r15, 0
 6d4:	0f c0       	rjmp	.+30     	; 0x6f4 <vfprintf+0x320>
 6d6:	1e 15       	cp	r17, r14
 6d8:	10 f0       	brcs	.+4      	; 0x6de <vfprintf+0x30a>
 6da:	9d 2c       	mov	r9, r13
 6dc:	0b c0       	rjmp	.+22     	; 0x6f4 <vfprintf+0x320>
 6de:	9d 2c       	mov	r9, r13
 6e0:	9e 0c       	add	r9, r14
 6e2:	91 1a       	sub	r9, r17
 6e4:	1e 2d       	mov	r17, r14
 6e6:	06 c0       	rjmp	.+12     	; 0x6f4 <vfprintf+0x320>
 6e8:	80 e2       	ldi	r24, 0x20	; 32
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	b3 01       	movw	r22, r6
 6ee:	0e 94 dd 03 	call	0x7ba	; 0x7ba <fputc>
 6f2:	1f 5f       	subi	r17, 0xFF	; 255
 6f4:	1e 15       	cp	r17, r14
 6f6:	c0 f3       	brcs	.-16     	; 0x6e8 <vfprintf+0x314>
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <vfprintf+0x32e>
 6fa:	1e 15       	cp	r17, r14
 6fc:	10 f4       	brcc	.+4      	; 0x702 <vfprintf+0x32e>
 6fe:	e1 1a       	sub	r14, r17
 700:	01 c0       	rjmp	.+2      	; 0x704 <vfprintf+0x330>
 702:	ee 24       	eor	r14, r14
 704:	04 ff       	sbrs	r16, 4
 706:	0f c0       	rjmp	.+30     	; 0x726 <vfprintf+0x352>
 708:	80 e3       	ldi	r24, 0x30	; 48
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	b3 01       	movw	r22, r6
 70e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <fputc>
 712:	02 ff       	sbrs	r16, 2
 714:	1d c0       	rjmp	.+58     	; 0x750 <vfprintf+0x37c>
 716:	01 fd       	sbrc	r16, 1
 718:	03 c0       	rjmp	.+6      	; 0x720 <vfprintf+0x34c>
 71a:	88 e7       	ldi	r24, 0x78	; 120
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e c0       	rjmp	.+28     	; 0x73c <vfprintf+0x368>
 720:	88 e5       	ldi	r24, 0x58	; 88
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0b c0       	rjmp	.+22     	; 0x73c <vfprintf+0x368>
 726:	80 2f       	mov	r24, r16
 728:	86 78       	andi	r24, 0x86	; 134
 72a:	91 f0       	breq	.+36     	; 0x750 <vfprintf+0x37c>
 72c:	01 ff       	sbrs	r16, 1
 72e:	02 c0       	rjmp	.+4      	; 0x734 <vfprintf+0x360>
 730:	8b e2       	ldi	r24, 0x2B	; 43
 732:	01 c0       	rjmp	.+2      	; 0x736 <vfprintf+0x362>
 734:	80 e2       	ldi	r24, 0x20	; 32
 736:	f7 fc       	sbrc	r15, 7
 738:	8d e2       	ldi	r24, 0x2D	; 45
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	b3 01       	movw	r22, r6
 73e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <fputc>
 742:	06 c0       	rjmp	.+12     	; 0x750 <vfprintf+0x37c>
 744:	80 e3       	ldi	r24, 0x30	; 48
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	b3 01       	movw	r22, r6
 74a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <fputc>
 74e:	9a 94       	dec	r9
 750:	d9 14       	cp	r13, r9
 752:	c0 f3       	brcs	.-16     	; 0x744 <vfprintf+0x370>
 754:	da 94       	dec	r13
 756:	f1 01       	movw	r30, r2
 758:	ed 0d       	add	r30, r13
 75a:	f1 1d       	adc	r31, r1
 75c:	80 81       	ld	r24, Z
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	b3 01       	movw	r22, r6
 762:	0e 94 dd 03 	call	0x7ba	; 0x7ba <fputc>
 766:	dd 20       	and	r13, r13
 768:	a9 f7       	brne	.-22     	; 0x754 <vfprintf+0x380>
 76a:	06 c0       	rjmp	.+12     	; 0x778 <vfprintf+0x3a4>
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	b3 01       	movw	r22, r6
 772:	0e 94 dd 03 	call	0x7ba	; 0x7ba <fputc>
 776:	ea 94       	dec	r14
 778:	ee 20       	and	r14, r14
 77a:	c1 f7       	brne	.-16     	; 0x76c <vfprintf+0x398>
 77c:	43 ce       	rjmp	.-890    	; 0x404 <vfprintf+0x30>
 77e:	f3 01       	movw	r30, r6
 780:	66 81       	ldd	r22, Z+6	; 0x06
 782:	77 81       	ldd	r23, Z+7	; 0x07
 784:	cb 01       	movw	r24, r22
 786:	2b 96       	adiw	r28, 0x0b	; 11
 788:	e2 e1       	ldi	r30, 0x12	; 18
 78a:	0c 94 83 04 	jmp	0x906	; 0x906 <__epilogue_restores__>

0000078e <strnlen_P>:
 78e:	fc 01       	movw	r30, r24
 790:	05 90       	lpm	r0, Z+
 792:	61 50       	subi	r22, 0x01	; 1
 794:	70 40       	sbci	r23, 0x00	; 0
 796:	01 10       	cpse	r0, r1
 798:	d8 f7       	brcc	.-10     	; 0x790 <strnlen_P+0x2>
 79a:	80 95       	com	r24
 79c:	90 95       	com	r25
 79e:	8e 0f       	add	r24, r30
 7a0:	9f 1f       	adc	r25, r31
 7a2:	08 95       	ret

000007a4 <strnlen>:
 7a4:	fc 01       	movw	r30, r24
 7a6:	61 50       	subi	r22, 0x01	; 1
 7a8:	70 40       	sbci	r23, 0x00	; 0
 7aa:	01 90       	ld	r0, Z+
 7ac:	01 10       	cpse	r0, r1
 7ae:	d8 f7       	brcc	.-10     	; 0x7a6 <strnlen+0x2>
 7b0:	80 95       	com	r24
 7b2:	90 95       	com	r25
 7b4:	8e 0f       	add	r24, r30
 7b6:	9f 1f       	adc	r25, r31
 7b8:	08 95       	ret

000007ba <fputc>:
 7ba:	0f 93       	push	r16
 7bc:	1f 93       	push	r17
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	8c 01       	movw	r16, r24
 7c4:	eb 01       	movw	r28, r22
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	81 ff       	sbrs	r24, 1
 7ca:	1b c0       	rjmp	.+54     	; 0x802 <fputc+0x48>
 7cc:	82 ff       	sbrs	r24, 2
 7ce:	0d c0       	rjmp	.+26     	; 0x7ea <fputc+0x30>
 7d0:	2e 81       	ldd	r18, Y+6	; 0x06
 7d2:	3f 81       	ldd	r19, Y+7	; 0x07
 7d4:	8c 81       	ldd	r24, Y+4	; 0x04
 7d6:	9d 81       	ldd	r25, Y+5	; 0x05
 7d8:	28 17       	cp	r18, r24
 7da:	39 07       	cpc	r19, r25
 7dc:	64 f4       	brge	.+24     	; 0x7f6 <fputc+0x3c>
 7de:	e8 81       	ld	r30, Y
 7e0:	f9 81       	ldd	r31, Y+1	; 0x01
 7e2:	01 93       	st	Z+, r16
 7e4:	f9 83       	std	Y+1, r31	; 0x01
 7e6:	e8 83       	st	Y, r30
 7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <fputc+0x3c>
 7ea:	e8 85       	ldd	r30, Y+8	; 0x08
 7ec:	f9 85       	ldd	r31, Y+9	; 0x09
 7ee:	80 2f       	mov	r24, r16
 7f0:	09 95       	icall
 7f2:	89 2b       	or	r24, r25
 7f4:	31 f4       	brne	.+12     	; 0x802 <fputc+0x48>
 7f6:	8e 81       	ldd	r24, Y+6	; 0x06
 7f8:	9f 81       	ldd	r25, Y+7	; 0x07
 7fa:	01 96       	adiw	r24, 0x01	; 1
 7fc:	9f 83       	std	Y+7, r25	; 0x07
 7fe:	8e 83       	std	Y+6, r24	; 0x06
 800:	02 c0       	rjmp	.+4      	; 0x806 <fputc+0x4c>
 802:	0f ef       	ldi	r16, 0xFF	; 255
 804:	1f ef       	ldi	r17, 0xFF	; 255
 806:	c8 01       	movw	r24, r16
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	1f 91       	pop	r17
 80e:	0f 91       	pop	r16
 810:	08 95       	ret

00000812 <__ultoa_invert>:
 812:	fa 01       	movw	r30, r20
 814:	aa 27       	eor	r26, r26
 816:	28 30       	cpi	r18, 0x08	; 8
 818:	51 f1       	breq	.+84     	; 0x86e <__ultoa_invert+0x5c>
 81a:	20 31       	cpi	r18, 0x10	; 16
 81c:	81 f1       	breq	.+96     	; 0x87e <__ultoa_invert+0x6c>
 81e:	e8 94       	clt
 820:	6f 93       	push	r22
 822:	6e 7f       	andi	r22, 0xFE	; 254
 824:	6e 5f       	subi	r22, 0xFE	; 254
 826:	7f 4f       	sbci	r23, 0xFF	; 255
 828:	8f 4f       	sbci	r24, 0xFF	; 255
 82a:	9f 4f       	sbci	r25, 0xFF	; 255
 82c:	af 4f       	sbci	r26, 0xFF	; 255
 82e:	b1 e0       	ldi	r27, 0x01	; 1
 830:	3e d0       	rcall	.+124    	; 0x8ae <__ultoa_invert+0x9c>
 832:	b4 e0       	ldi	r27, 0x04	; 4
 834:	3c d0       	rcall	.+120    	; 0x8ae <__ultoa_invert+0x9c>
 836:	67 0f       	add	r22, r23
 838:	78 1f       	adc	r23, r24
 83a:	89 1f       	adc	r24, r25
 83c:	9a 1f       	adc	r25, r26
 83e:	a1 1d       	adc	r26, r1
 840:	68 0f       	add	r22, r24
 842:	79 1f       	adc	r23, r25
 844:	8a 1f       	adc	r24, r26
 846:	91 1d       	adc	r25, r1
 848:	a1 1d       	adc	r26, r1
 84a:	6a 0f       	add	r22, r26
 84c:	71 1d       	adc	r23, r1
 84e:	81 1d       	adc	r24, r1
 850:	91 1d       	adc	r25, r1
 852:	a1 1d       	adc	r26, r1
 854:	20 d0       	rcall	.+64     	; 0x896 <__ultoa_invert+0x84>
 856:	09 f4       	brne	.+2      	; 0x85a <__ultoa_invert+0x48>
 858:	68 94       	set
 85a:	3f 91       	pop	r19
 85c:	2a e0       	ldi	r18, 0x0A	; 10
 85e:	26 9f       	mul	r18, r22
 860:	11 24       	eor	r1, r1
 862:	30 19       	sub	r19, r0
 864:	30 5d       	subi	r19, 0xD0	; 208
 866:	31 93       	st	Z+, r19
 868:	de f6       	brtc	.-74     	; 0x820 <__ultoa_invert+0xe>
 86a:	cf 01       	movw	r24, r30
 86c:	08 95       	ret
 86e:	46 2f       	mov	r20, r22
 870:	47 70       	andi	r20, 0x07	; 7
 872:	40 5d       	subi	r20, 0xD0	; 208
 874:	41 93       	st	Z+, r20
 876:	b3 e0       	ldi	r27, 0x03	; 3
 878:	0f d0       	rcall	.+30     	; 0x898 <__ultoa_invert+0x86>
 87a:	c9 f7       	brne	.-14     	; 0x86e <__ultoa_invert+0x5c>
 87c:	f6 cf       	rjmp	.-20     	; 0x86a <__ultoa_invert+0x58>
 87e:	46 2f       	mov	r20, r22
 880:	4f 70       	andi	r20, 0x0F	; 15
 882:	40 5d       	subi	r20, 0xD0	; 208
 884:	4a 33       	cpi	r20, 0x3A	; 58
 886:	18 f0       	brcs	.+6      	; 0x88e <__ultoa_invert+0x7c>
 888:	49 5d       	subi	r20, 0xD9	; 217
 88a:	31 fd       	sbrc	r19, 1
 88c:	40 52       	subi	r20, 0x20	; 32
 88e:	41 93       	st	Z+, r20
 890:	02 d0       	rcall	.+4      	; 0x896 <__ultoa_invert+0x84>
 892:	a9 f7       	brne	.-22     	; 0x87e <__ultoa_invert+0x6c>
 894:	ea cf       	rjmp	.-44     	; 0x86a <__ultoa_invert+0x58>
 896:	b4 e0       	ldi	r27, 0x04	; 4
 898:	a6 95       	lsr	r26
 89a:	97 95       	ror	r25
 89c:	87 95       	ror	r24
 89e:	77 95       	ror	r23
 8a0:	67 95       	ror	r22
 8a2:	ba 95       	dec	r27
 8a4:	c9 f7       	brne	.-14     	; 0x898 <__ultoa_invert+0x86>
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	61 05       	cpc	r22, r1
 8aa:	71 05       	cpc	r23, r1
 8ac:	08 95       	ret
 8ae:	9b 01       	movw	r18, r22
 8b0:	ac 01       	movw	r20, r24
 8b2:	0a 2e       	mov	r0, r26
 8b4:	06 94       	lsr	r0
 8b6:	57 95       	ror	r21
 8b8:	47 95       	ror	r20
 8ba:	37 95       	ror	r19
 8bc:	27 95       	ror	r18
 8be:	ba 95       	dec	r27
 8c0:	c9 f7       	brne	.-14     	; 0x8b4 <__ultoa_invert+0xa2>
 8c2:	62 0f       	add	r22, r18
 8c4:	73 1f       	adc	r23, r19
 8c6:	84 1f       	adc	r24, r20
 8c8:	95 1f       	adc	r25, r21
 8ca:	a0 1d       	adc	r26, r0
 8cc:	08 95       	ret

000008ce <__prologue_saves__>:
 8ce:	2f 92       	push	r2
 8d0:	3f 92       	push	r3
 8d2:	4f 92       	push	r4
 8d4:	5f 92       	push	r5
 8d6:	6f 92       	push	r6
 8d8:	7f 92       	push	r7
 8da:	8f 92       	push	r8
 8dc:	9f 92       	push	r9
 8de:	af 92       	push	r10
 8e0:	bf 92       	push	r11
 8e2:	cf 92       	push	r12
 8e4:	df 92       	push	r13
 8e6:	ef 92       	push	r14
 8e8:	ff 92       	push	r15
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	cd b7       	in	r28, 0x3d	; 61
 8f4:	de b7       	in	r29, 0x3e	; 62
 8f6:	ca 1b       	sub	r28, r26
 8f8:	db 0b       	sbc	r29, r27
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	f8 94       	cli
 8fe:	de bf       	out	0x3e, r29	; 62
 900:	0f be       	out	0x3f, r0	; 63
 902:	cd bf       	out	0x3d, r28	; 61
 904:	09 94       	ijmp

00000906 <__epilogue_restores__>:
 906:	2a 88       	ldd	r2, Y+18	; 0x12
 908:	39 88       	ldd	r3, Y+17	; 0x11
 90a:	48 88       	ldd	r4, Y+16	; 0x10
 90c:	5f 84       	ldd	r5, Y+15	; 0x0f
 90e:	6e 84       	ldd	r6, Y+14	; 0x0e
 910:	7d 84       	ldd	r7, Y+13	; 0x0d
 912:	8c 84       	ldd	r8, Y+12	; 0x0c
 914:	9b 84       	ldd	r9, Y+11	; 0x0b
 916:	aa 84       	ldd	r10, Y+10	; 0x0a
 918:	b9 84       	ldd	r11, Y+9	; 0x09
 91a:	c8 84       	ldd	r12, Y+8	; 0x08
 91c:	df 80       	ldd	r13, Y+7	; 0x07
 91e:	ee 80       	ldd	r14, Y+6	; 0x06
 920:	fd 80       	ldd	r15, Y+5	; 0x05
 922:	0c 81       	ldd	r16, Y+4	; 0x04
 924:	1b 81       	ldd	r17, Y+3	; 0x03
 926:	aa 81       	ldd	r26, Y+2	; 0x02
 928:	b9 81       	ldd	r27, Y+1	; 0x01
 92a:	ce 0f       	add	r28, r30
 92c:	d1 1d       	adc	r29, r1
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	f8 94       	cli
 932:	de bf       	out	0x3e, r29	; 62
 934:	0f be       	out	0x3f, r0	; 63
 936:	cd bf       	out	0x3d, r28	; 61
 938:	ed 01       	movw	r28, r26
 93a:	08 95       	ret

0000093c <_exit>:
 93c:	f8 94       	cli

0000093e <__stop_program>:
 93e:	ff cf       	rjmp	.-2      	; 0x93e <__stop_program>
